NAME-UDIT KHANDELWAL							ASSIGNMENT-26 Member function, static, constructor (C++)


1. Define a class Complex to represent a complex number with instance variables a and
b to store real and imaginary parts. Also define following member functions
a. void setData(int,int)
b. void showData()
c. Complex add(Complex)

#include<iostream>
using namespace std;

class Complex
{
private:
    int a,b;
public:
    Complex(Complex &c)
    {
        a=c.a;
        b=c.b;
    }

    Complex()
    {
        a=0;
        b=0;
    }

    void setData(int r,int i)
    {
        a=r;
        b=i;
    }

    void showData()
    {
        cout<<"real part: "<<a<<" imaginary part: "<<b<<endl;
    }

    Complex add(Complex C)
    {
        Complex temp;
        temp.a=a+C.a;
        temp.b=b+C.b;
        return temp;
    }
};

int main()
{
    Complex c1,c2,c3;
    c1.setData(3,4);
    c1.showData();
    c2.setData(2,1);
    c2.showData();
    c3=c1.add(c2);
    c3.showData();
    return 0;
}


2. Define a class Time to represent a time with instance variables h,m and s to store
hour, minute and second. Also define following member functions
a. void setTime(int,int,int)
b. void showTime()
c. void normalize()
d. Time add(Time)

#include<iostream>
using namespace std;

class Time
{
private:
    int h,m,s;
public:
    Time(Time &t)
    {
        h=t.h;
        m=t.m;
        s=t.s;
    }

    Time()
    {
        h=0;
        m=0;
        s=0;
    }

    void setTime(int x,int y,int z)
    {
        h=x;
        m=y;
        s=z;
    }

    void showTime()
    {
        cout<<"time is: "<<h<<"hours "<<m<<"minutes "<<s<<"seconds"<<endl;
    }

    void normalize()
    {
        m+=s/60;
        s%=60;
        h+=m/60;
        m%=60;
    }

    Time add(Time T)
    {
        Time temp;
        temp.h=h+T.h;
        temp.m=m+T.m;
        temp.s=s+T.s;
        return temp;
    }
};

int main()
{
    Time t1,t2,t3;
    t1.setTime(1,20,30);
    t1.normalize();
    t1.showTime();
    t2.setTime(2,30,20);
    t2.normalize();
    t2.showTime();
    t3=t1.add(t2);
    t3.normalize();
    t3.showTime();
    return 0;
}


3. Define a class Cube and calculate Volume of Cube and initialise it using constructor.

  #include<iostream>
using namespace std;

class Cube
{
private:
    int side;
public:
    Cube(int x)
    {
        side=x;
    }

    Cube()
    {
        side=0;
    }

    void setSide(int x)
    {
        side=x;
    }

    int getSide()
    {
        return side;
    }

    int volume()
    {
        return side*side*side;
    }
};

int main()
{
    Cube c1(10);
    Cube c2;
    c2.setSide(20);
    cout<<"volume of cube of side "<<c1.getSide()<<" is: "<<c1.volume()<<endl;
    cout<<"volume of cube of side "<<c2.getSide()<<" is: "<<c2.volume()<<endl;
    return 0;
}


4. Define a class Counter and Write a program to Show Counter using Constructor.

#include<iostream>
using namespace std;

class Counter
{
private:
    static int count;
public:
    Counter()
    {
        count++;
    }

    static int showCounter()
    {
        return count;
    }
};

int Counter::count;

int main()
{
    Counter c1,c2,c3,c4,c5;
    cout<<"Number of objects formed are: "<<Counter::showCounter();
    return 0;
}


5. Define a class Date and write a program to Display Dateand initialise date object
using Constructors.

#include<iostream>
using namespace std;

class Date
{
private:
    int d,m,y;
public:
    Date(int a,int b,int c)
    {
        d=a;
        m=b;
        y=c;
    }

    Date()
    {
        d=7;
        m=10;
        y=2022;
    }
    void displayDate()
    {
        cout<<"date is: "<<d<<"/"<<m<<"/"<<y<<endl;
    }
};

int main()
{
    Date d1(6,10,2022),d2;
    d1.displayDate();
    d2.displayDate();
    return 0;
}


6. Define a class student and write a program to enter student details using constructor
and define member function to display all the details.

#include<iostream>
using namespace std;

class Student
{
private:
    int marks;
    char grades;
public:
    Student(int m,char g)
    {
        marks=m;
        grades=g;
    }

    Student()
    {
        marks=0;
        grades='C';
    }

    void setDetails(int m,char g)
    {
        marks=m;
        grades=g;
    }

    void displayDetails()
    {
        cout<<"marks of student is: "<<marks<<" grades of student is: "<<grades<<endl;
    }
};

int main()
{
    Student s1(80,'A'),s2;
    s2.setDetails(60,'B');
    s1.displayDetails();
    s2.displayDetails();
    return 0;
}


7. Define a class Box and write a program to enter length, breadth and height and
initialise objects using constructor also define member functions to calculate volume
of the box.

#include<iostream>
using namespace std;

class Box
{
private:
    int l,b,h;
public:
    Box(int m,int n,int p)
    {
        l=m;
        b=n;
        h=p;
    }

    Box()
    {
        l=0;
        b=0;
        h=0;
    }

    void setDetails(int m,int n,int p)
    {
        l=m;
        b=n;
        h=p;
    }

    void getDetails()
    {
        cout<<"length is: "<<l<<" breadth is: "<<b<<" height is: "<<h;
    }

    int volume()
    {
        return l*b*h;
    }
};

int main()
{
    Box b1(10,20,30),b2;
    b2.setDetails(100,200,300);
    b1.getDetails();
    cout<<" volume is: "<<b1.volume()<<endl;
    b2.getDetails();
    cout<<" volume is: "<<b2.volume()<<endl;
    return 0;
}


8. Define a class Bank and define member functions to read principal , rate of interest
and year. Another member functions to calculate simple interest and display it.
Initialise all details using constructor.

#include<iostream>
using namespace std;

class Bank
{
private:
    int principal,yr,si;
    static int roi;
public:
    Bank()
    {
        principal=0;
        yr=0;
        si=0;
    }

    Bank(int p,int y)
    {
        principal=p;
        yr=y;
        si=0;
    }

    void setDetails(int p,int y)
    {
        principal=p;
        yr=y;
    }

    void getDetails()
    {
        cout<<"principal amount is: "<<principal<<" time in years are: "<<yr;
    }

    void calcSI()
    {
        si=principal*roi*yr/100;
    }

    int getSI()
    {
        return si;
    }
};

int Bank::roi=10;

int main()
{
    Bank obj1(1000,1);
    Bank obj2;
    obj2.setDetails(2000,2);
    obj1.calcSI();
    obj1.getDetails();
    cout<<" simple interest is: "<<obj1.getSI()<<endl;
    obj2.calcSI();
    obj2.getDetails();
    cout<<" simple interest is: "<<obj2.getSI()<<endl;
    return 0;
}


9. Define a class Bill and define its member function get() to take detail of customer ,
calculateBill() function to calculate electricity bill using below tariff :
Upto 100 unit RS. 1.20 per unit
From 100 to 200 unit RS. 2 per unit
Above 200 units RS. 3 per unit.

#include<iostream>
using namespace std;

class Bill
{
private:
    int units,id;
    float bill;
public:
    Bill()
    {
        id=0;
        units=0;
        bill=0;
    }

    Bill(int i,int u)
    {
        id=i;
        units=u;
        bill=0;
    }

    void setDetails(int i,int u)
    {
        id=i;
        units=u;
        bill=0;
    }

    void getDetails()
    {
        cout<<"customer id is: "<<id<<" and units consumption are: "<<units;
    }

    void calculateBill()
    {
        if(units<=100)
        {
            bill=units*1.20;
        }
        if(units>100&&units<=200)
        {
            bill=(units-100)*2+100*1.20;
        }
        if(units>200)
        {
            bill=100*1.20+100*2+(units-200)*3;
        }
    }

    int getBill()
    {
        return bill;
    }
};

int main()
{
    Bill b1(1,125),b2;
    b2.setDetails(2,250);
    b1.calculateBill();
    b2.calculateBill();
    b1.getDetails();
    cout<<" billing amount is: "<<b1.getBill()<<endl;
    b2.getDetails();
    cout<<" billing amount is: "<<b2.getBill()<<endl;
    return 0;
}


10. Define a class StaticCount and create a static variable. Increment this variable in a
function and call this 3 times and display the result.

#include<iostream>
using namespace std;

class StaticCount
{
private:
    static int count;
public:
    static int call()
    {
        return ++count;
    }
};

int StaticCount::count;

int main()
{
    cout<<StaticCount::call()<<endl;
    cout<<StaticCount::call()<<endl;
    cout<<StaticCount::call()<<endl;
    return 0;
}
